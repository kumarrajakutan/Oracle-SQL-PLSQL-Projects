-- Insurance Management System (PL/SQL mini project)

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR2(100),
    dob DATE,
    address VARCHAR2(255),
    phone VARCHAR2(20),
    email VARCHAR2(100)
);

CREATE TABLE policies (
    policy_id INT PRIMARY KEY,
    policy_type VARCHAR2(50),
    premium_amount DECIMAL(10, 2),
    coverage_amount DECIMAL(10, 2),
    term_years INT  
);

CREATE TABLE customer_policies (
    customerpolicy_id INT PRIMARY KEY,
    customer_id INT,
    policy_id INT,
    start_date DATE,
    end_date DATE,
    status VARCHAR2(20),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (policy_id) REFERENCES policies(policy_id)
);

CREATE TABLE claims (
    claim_id INT PRIMARY KEY,
    customerpolicy_id INT,
    claim_date DATE,
    claim_amount DECIMAL(10, 2),
    claim_status VARCHAR2(20),
    FOREIGN KEY (customerpolicy_id) REFERENCES customer_policies(customerpolicy_id)
);

CREATE TABLE Claims_Log (
    Log_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Claim_ID NUMBER NOT NULL,
    Log_Message VARCHAR2(255),
    Log_Date DATE DEFAULT SYSDATE
);


CREATE TABLE payments ( 
    payment_id INT PRIMARY KEY,
    customerpolicy_id INT,
    payment_date DATE,
    amount DECIMAL(10,2),
    payment_status VARCHAR2(20),
    FOREIGN KEY (customerpolicy_id) REFERENCES customer_policies(customerpolicy_id)
);

-- procedure to add a new customer
CREATE OR REPLACE PROCEDURE add_customer(
    p_customer_id INT, 
    p_name VARCHAR2,
    p_dob DATE,
    p_address VARCHAR2,
    p_phone VARCHAR2,
    p_email VARCHAR2
) AS 
BEGIN
    INSERT INTO customers (customer_id, name, dob, address, phone, email)
    VALUES (p_customer_id, p_name, p_dob, p_address, p_phone, p_email);
    COMMIT;
END;
/

-- procedure to add a new policy
CREATE OR REPLACE PROCEDURE add_policy (
    p_policy_id INT,
    p_policy_type VARCHAR2,
    p_premium_amount DECIMAL,
    p_coverage_amount DECIMAL,
    p_term_years INT
) AS
BEGIN
    INSERT INTO policies(policy_id, policy_type, premium_amount, coverage_amount, term_years)
    VALUES(p_policy_id, p_policy_type, p_premium_amount, p_coverage_amount, p_term_years);
    COMMIT;
END;
/

-- Procedure to assign a policy to a customer
CREATE OR REPLACE PROCEDURE assign_policy_to_customer( 
    p_customerpolicy_id INT ,
    p_customer_id INT,
    p_policy_id INT,
    p_start_date DATE,
    p_end_date DATE,
    p_status VARCHAR2
) AS 
BEGIN
    INSERT INTO customer_policies (customerpolicy_id, customer_id, policy_id, start_date, end_date, status) 
    VALUES (p_customerpolicy_id, p_customer_id, p_policy_id, p_start_date, p_end_date, p_status);
    COMMIT;
END;
/

-- Procedure to submit a claim
CREATE OR REPLACE PROCEDURE submit_claim( 
    p_claim_id INT,
    p_customerpolicy_id INT,
    p_claim_date DATE,
    p_claim_amount DECIMAL,
    p_claim_status VARCHAR2
) AS 
BEGIN
    INSERT INTO claims (claim_id, customerpolicy_id, claim_date, claim_amount, claim_status) 
    VALUES (p_claim_id, p_customerpolicy_id, p_claim_date, p_claim_amount, p_claim_status);
    COMMIT;
END;
/

-- procedure to make a payment
CREATE OR REPLACE PROCEDURE make_payment ( 
    p_payment_id INT,
    p_customerpolicy_id INT,
    p_payment_date DATE,
    p_amount DECIMAL,
    p_payment_status VARCHAR2
) AS 
BEGIN 
    INSERT INTO payments (payment_id, customerpolicy_id, payment_date, amount, payment_status)
    VALUES (p_payment_id, p_customerpolicy_id, p_payment_date, p_amount, p_payment_status);
    COMMIT;
END;
/
-- Function to calculate total premium paid by a customer
CREATE OR REPLACE FUNCTION total_premium_paid(p_customer_id INT) RETURN DECIMAL IS 
    total_paid DECIMAL(10,2);
BEGIN
    SELECT SUM(p.premium_amount) INTO total_paid
    FROM policies p
    JOIN customer_policies cp 
    ON p.policy_id = cp.policy_id
    WHERE cp.customer_id = p_customer_id and cp.status = 'Active';
    RETURN total_paid;
END;
/

-- Function to get policy status based on the end date
CREATE OR REPLACE FUNCTION get_policy_status(p_policy_id INT) RETURN VARCHAR2 IS 
    policy_status VARCHAR2(20);
BEGIN 
    SELECT CASE 
                WHEN SYSDATE > end_date THEN 'Expired'
                ELSE 'Active'
            END 
            INTO policy_status
    FROM customer_policies
    WHERE policy_id = p_policy_id;
    RETURN policy_status;
END;
/

-- Trigger to update policy status to 'Expired' when the end date has passed
CREATE OR REPLACE TRIGGER update_policy_status
AFTER UPDATE ON customer_policies
FOR EACH ROW
BEGIN
    IF :NEW.end_date < SYSDATE AND :NEW.status != 'Expired' THEN 
        UPDATE customer_policies
        SET status = 'Expired'
        WHERE customerpolicy_id = :NEW.customerpolicy_id;
    END IF;
END;
/

-- Trigger to log claims after they are inserted
CREATE OR REPLACE TRIGGER log_claim_insertion
AFTER INSERT ON claims
FOR EACH ROW
BEGIN
    INSERT INTO claims_log(claim_id, log_message, log_date)
    VALUES (:NEW.claim_id, 'New claim submitted for policy' || :NEW.customerpolicy_id, SYSDATE);
END;
/

-- View to display active customer policies

CREATE VIEW active_customer_policies as
SELECT c.customer_id, c.name, p.policy_type, cp.start_date, cp.end_date, cp.status
FROM customers c
JOIN customer_policies cp ON c.customer_id = cp.customer_id
JOIN policies p ON cp.policy_id = p.policy_id 
WHERE cp.status = 'Active';

-- View to display total claims per customer
CREATE VIEW total_claims_per_customer AS
SELECT c.customer_id, c.name, SUM(cl.claim_amount) AS total_claims
FROM customers c 
JOIN customer_policies cp ON c.customer_id = cp.customer_id
JOIN claims cl ON cl.customerpolicy_id = cp.customerpolicy_id
GROUP BY c.customer_id, c.name;

-- Report: List of active policies for all customers
SELECT * FROM active_customer_policies;

-- Report: Total claims per customer
SELECT * FROM total_claims_per_customer;










































